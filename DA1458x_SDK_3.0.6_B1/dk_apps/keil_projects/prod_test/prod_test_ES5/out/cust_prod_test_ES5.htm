<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\cust_prod_test_ES5.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\cust_prod_test_ES5.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Thu Apr 02 17:34:30 2015
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
gtl_hci_rx_payload_func &rArr; hci_xtal_trim_cmd &rArr; auto_trim &rArr; calculations_2 &rArr; Simulation &rArr; __aeabi_ddiv
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">SWTIM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SWTIM_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[11]">BLE_CRYPT_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[9]">BLE_CSCNT_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[b]">BLE_ERROR_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[d]">BLE_EVENT_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[7]">BLE_FINETGTIM_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[8]">BLE_GROSSTGTIM_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[10]">BLE_RF_DIAG_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[c]">BLE_RX_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[a]">BLE_SLP_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4a]">DCoffsetCalibration_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3a]">GPADC_init_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[19]">GPIO0_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1a]">GPIO1_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1b]">GPIO2_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1c]">GPIO3_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1d]">GPIO4_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[56]">HardFault_HandlerC</a> from hardfault_handler.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[14]">I2C_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4b]">IffCalibration_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[17]">KEYBRD_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[55]">NMI_HandlerC</a> from nmi_handler.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[4]">PendSV_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5d]">RADIOCNTL_Handler</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[18]">RFCAL_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[15]">SPI_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[57]">SVC_Handler_c</a> from arch_main.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[e]">SWTIM_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[53]">SystemInit</a> from system_armcm0.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[13]">UART2_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[12]">UART_Handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[27]">UART_Handler_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[f]">WKUP_QUADEC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[54]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from boot_vectors.o(.text)
 <LI><a href="#[3c]">check_pll_lock_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[41]">clear_HW_LUT_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[6b]">cmp_abs_time</a> from arch_main.o(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[32]">custom_nvds_get_func</a> from nvds.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[20]">dummyf</a> from jump_table.o(.text) referenced 2 times from jump_table.o(jump_table_mem_area)
 <LI><a href="#[35]">enable_BLE_core_irq_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[48]">enable_rf_diag_irq_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[45]">find_initial_calcap_ranges_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4d]">get_rc16m_count_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2e]">gtl_eif_init_func</a> from custom_gtl_eif.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[65]">gtl_eif_rx_done</a> from custom_gtl_eif.o(.text) referenced from custom_gtl_eif.o(.text)
 <LI><a href="#[67]">gtl_eif_tx_done</a> from custom_gtl_eif.o(.text) referenced from custom_gtl_eif.o(.text)
 <LI><a href="#[66]">gtl_eif_tx_done_evt_handler</a> from custom_gtl_eif.o(.text) referenced from custom_gtl_eif.o(.text)
 <LI><a href="#[37]">gtl_hci_rx_header_func</a> from custom_gtl_hci.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[38]">gtl_hci_rx_payload_func</a> from custom_gtl_hci.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[39]">gtl_hci_tx_evt_func</a> from custom_gtl_hci.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[6a]">gtl_polling_to_handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from arch_main.o(.constdata)
 <LI><a href="#[69]">gtl_sleep_to_handler</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from arch_main.o(.constdata)
 <LI><a href="#[2f]">ke_task_init_func</a> from ke_task.obj(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[60]">ke_task_schedule</a> from ke_task.obj(.text) referenced from ke_task.obj(.text)
 <LI><a href="#[30]">ke_timer_init_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[6c]">l2cc_pdu_recv_ind_handler</a> from atts_task.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[64]">lld_evt_end</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from custom_lld_evt.o(.text)
 <LI><a href="#[2d]">lld_evt_init_func</a> from custom_lld_evt.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[63]">lld_evt_rx</a> from custom_lld_evt.o(.text) referenced from custom_lld_evt.o(.text)
 <LI><a href="#[62]">lld_evt_schedule</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from custom_lld_evt.o(.text)
 <LI><a href="#[34]">lld_init_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[28]">lld_sleep_compensate_func_patched</a> from rwble.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[29]">lld_sleep_init_func</a> from arch_main.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2b]">lld_sleep_lpcycles_2_us_sel_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2a]">lld_sleep_us_2_lpcycles_sel_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[51]">lld_test_mode_rx_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[50]">lld_test_mode_tx_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4f]">lld_test_stop_func</a> from custom_lld.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[31]">llm_encryption_done_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[52]">main</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1e]">main_func</a> from arch_main.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3b]">meas_precharge_freq_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[49]">modulationGainCalibration_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[68]">my_gtl_msg_send_handler</a> from arch_main.o(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[71]">my_llc_ch_map_req_ind</a> from ch_map.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[70]">my_llc_con_update_req_ind</a> from ch_map.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[72]">patched_gapm_adv_op_sanity</a> from gapm_util.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[36]">platform_reset_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[46]">pll_vcocal_LUT_InitUpdate_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4c]">rf_calibration_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[5e]">rf_force_agc_enable</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[1f]">rf_init_func</a> from rf_580.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[58]">rf_reg_rd</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[59]">rf_reg_wr</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[2c]">rf_reinit_func</a> from rf_580.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[5c]">rf_reset</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5f]">rf_rssi_convert</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5b]">rf_sleep</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5a]">rf_txpwr_dbm_get</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[33]">rwip_eif_get_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[43]">save_configure_restore_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4e]">set_gauss_modgain_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[47]">set_rf_cal_cap_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[6e]">smpc_check_pairing_feat</a> from smpc.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[6f]">smpc_pairing_cfm_handler</a> from smpc_task.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[6d]">smpc_send_pairing_req_ind</a> from smpc.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[61]">tx_msg_otp_read_cfm_completed</a> from customer_prod.o(.text) referenced from customer_prod.o(.text)
 <LI><a href="#[24]">uart_finish_transfers_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[23]">uart_flow_off_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[22]">uart_flow_on_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[21]">uart_init_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[25]">uart_read_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[26]">uart_write_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[42]">update_LUT_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3e]">update_calcap_max_channel_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3d]">update_calcap_min_channel_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[44]">update_calcap_ranges_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[40]">write_HW_LUT_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3f]">write_one_SW_LUT_entry_func</a> from rom_symdef_ES5_Prod_Test.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>set_system_clocks</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[ea]"></a>rf_workaround_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>platform_reset_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[52]"></a>main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[33]"></a>rwip_eif_get_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[7e]"></a>app_get_sleep_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_force_active_mode (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>co_list_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_func (via Veneer)
</UL>

<P><STRONG><a name="[80]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_gtl_msg_send_handler (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>llc_util_dicon_procedure</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>enable_BLE_core_irq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[34]"></a>lld_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[c3]"></a>lld_ch_map_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>lld_con_update_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>lld_test_mode_tx_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[51]"></a>lld_test_mode_rx_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[116]"></a>lld_data_tx_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_check (via Veneer)
</UL>

<P><STRONG><a name="[102]"></a>lld_evt_try_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop (via Veneer)
</UL>

<P><STRONG><a name="[64]"></a>lld_evt_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> custom_lld_evt.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>lld_evt_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> custom_lld_evt.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>lld_evt_ack_received</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_rx_check (via Veneer)
</UL>

<P><STRONG><a name="[117]"></a>lld_evt_delete</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_stop_func (via Veneer)
</UL>

<P><STRONG><a name="[e6]"></a>lld_evt_start_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CSCNT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[ed]"></a>lld_evt_end_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_EVENT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[ec]"></a>lld_evt_rx_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RX_Handler (via Veneer)
</UL>

<P><STRONG><a name="[113]"></a>lld_evt_local_sca_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_func (via Veneer)
</UL>

<P><STRONG><a name="[b2]"></a>lld_sleep_us_2_lpcycles_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func (via Veneer)
</UL>

<P><STRONG><a name="[b3]"></a>lld_sleep_lpcycles_2_us_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func (via Veneer)
</UL>

<P><STRONG><a name="[f6]"></a>lld_sleep_enter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[97]"></a>lld_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[fb]"></a>llm_test_mode_start_tx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_tx (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_continue_tx (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>llm_test_mode_start_rx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_rx (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>llm_encryption_done_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[a3]"></a>uart_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init (via Veneer)
</UL>

<P><STRONG><a name="[21]"></a>uart_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b6]"></a>uart_flow_on</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off_func (via Veneer)
</UL>

<P><STRONG><a name="[22]"></a>uart_flow_on_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[24]"></a>uart_finish_transfers_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[25]"></a>uart_read_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[78]"></a>uart_write</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_rw_cmd (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_write_cmd (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_read_cmd (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_rw_cmd (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_xtal_trim_cmd (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_sleep_test_cmd (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_rx_prod_test_cmd (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_tx_continuous_test_cmd (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unmodulated_cmd (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start_continue_test_mode (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_send_nb_packages (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_start_prod_rx_test (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>uart_write_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[12]"></a>UART_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART_Handler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3a]"></a>GPADC_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3b]"></a>meas_precharge_freq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3c]"></a>check_pll_lock_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3d]"></a>update_calcap_min_channel_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3e]"></a>update_calcap_max_channel_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3f]"></a>write_one_SW_LUT_entry_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[40]"></a>write_HW_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[41]"></a>clear_HW_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[42]"></a>update_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[43]"></a>save_configure_restore_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[44]"></a>update_calcap_ranges_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[45]"></a>find_initial_calcap_ranges_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[7c]"></a>pll_vcocal_LUT_InitUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
</UL>

<P><STRONG><a name="[46]"></a>pll_vcocal_LUT_InitUpdate_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[ee]"></a>set_rf_cal_cap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unmodulated_cmd (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RF_DIAG_Handler (via Veneer)
</UL>

<P><STRONG><a name="[47]"></a>set_rf_cal_cap_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[49]"></a>modulationGainCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4a]"></a>DCoffsetCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4b]"></a>IffCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[7d]"></a>rf_calibration</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
</UL>

<P><STRONG><a name="[4c]"></a>rf_calibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[7b]"></a>get_rc16m_count</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>$Super$$get_rc16m_count_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count_func (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>set_gauss_modgain</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RF_DIAG_Handler (via Veneer)
</UL>

<P><STRONG><a name="[4e]"></a>set_gauss_modgain_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[94]"></a>enable_rf_diag_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit_func (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[48]"></a>enable_rf_diag_irq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[f5]"></a>gtl_enter_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[81]"></a>gtl_send_msg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_gtl_msg_send_handler (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[69]"></a>gtl_sleep_to_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>gtl_polling_to_handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>atts_mtu_exc_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[c8]"></a>atts_find_info_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>atts_find_by_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[ca]"></a>atts_read_by_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[cb]"></a>atts_read_by_grp_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[cc]"></a>atts_read_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>atts_read_blob_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[ce]"></a>atts_read_mult_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[cf]"></a>atts_write_no_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>atts_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[d1]"></a>atts_signed_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>atts_prepare_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>atts_execute_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>atts_send_cmd_cmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[dd]"></a>smpc_check_max_key_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[de]"></a>smpc_check_key_distrib</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>smpc_generate_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[dc]"></a>smpc_pairing_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>smpc_tkdp_rcp_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>smpc_pdu_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[d9]"></a>smpc_tkdp_send_continue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[df]"></a>smpc_get_key_sec_prop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>smpc_is_sec_mode_reached</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>gapc_get_role</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[d5]"></a>gapc_get_enc_keysize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>gapm_get_privacy_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>gapm_set_recon_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity (via Veneer)
</UL>

<P><STRONG><a name="[f3]"></a>ke_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>ke_event_callback_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_func (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init_func (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_init_func (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>ke_event_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done (via Veneer)
</UL>

<P><STRONG><a name="[be]"></a>ke_event_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[96]"></a>ke_event_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[9c]"></a>ke_mem_is_empty</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[10e]"></a>ke_malloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_read_cmd (via Veneer)
</UL>

<P><STRONG><a name="[10c]"></a>ke_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_msg_otp_read_cfm_completed (via Veneer)
</UL>

<P><STRONG><a name="[d4]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_header_func (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_check (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_check (via Veneer)
</UL>

<P><STRONG><a name="[bd]"></a>ke_msg_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done (via Veneer)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[82]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_gtl_msg_send_handler (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[7f]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_gtl_msg_send_handler (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>ke_task_handler_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>ke_timer_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[125]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_stop (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[c5]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[f4]"></a>ke_timer_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>nvds_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[f7]"></a>ble_regs_push</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[e7]"></a>ble_regs_pop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>rf_reinit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[8e]"></a>rwip_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[95]"></a>rwip_prevent_sleep_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[7a]"></a>rwip_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_write (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_hdr (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>rwip_wakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_start (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync (via Veneer)
</UL>

<P><STRONG><a name="[af]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_delay (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>rwip_sleep_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>rwip_ext_wakeup_enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_stop (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_tx_done_evt_handler (via Veneer)
</UL>

<P><STRONG><a name="[7]"></a>BLE_FINETGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_GROSSTGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>$Super$$BLE_CSCNT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CSCNT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[b]"></a>BLE_ERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BLE_CRYPT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>func_check_mem</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[9b]"></a>test_rxdone</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_rcx_func (via Veneer)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate_func_patched (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Read (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>srand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_nvds_get_func (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read_bdaddr_from_otp (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_rw_cmd (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_read (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_func (via Veneer)
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init_func (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_nvds_get_func (via Veneer)
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>_double_round</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive (via Veneer)
</UL>

<P><STRONG><a name="[c4]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef_ES5_Prod_Test.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_sanity (via Veneer)
</UL>

<P><STRONG><a name="[54]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[138]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[140]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[141]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[142]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[143]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[53]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SWTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWTIM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWTIM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>patch_gtl_task</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = patch_gtl_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[57]"></a>SVC_Handler_c</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>patch_func</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patch_func &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[29]"></a>lld_sleep_init_func</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_sleep_init_func &rArr; set_sleep_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1e]"></a>main_func</STRONG> (Thumb, 1010 bytes, Stack size 16 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main_func &rArr; periph_init &rArr; set_pad_functions &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rxdone (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_clocks (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_get (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read_bdaddr_from_otp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_check (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_is_empty (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_get (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_trim_from_otp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pwr_and_clk_ble
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_check_mem (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rf_diag_irq (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_rcx20
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_deep_sleep
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_sleep_mode (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init_func
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_gtl_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[20]"></a>dummyf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jump_table.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[55]"></a>NMI_HandlerC</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, nmi_handler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>app_disable_sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_force_active_mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_sleep_test_cmd
</UL>

<P><STRONG><a name="[9f]"></a>app_set_extended_sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_restore_sleep_mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_sleep_test_cmd
</UL>

<P><STRONG><a name="[90]"></a>app_set_deep_sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_restore_sleep_mode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_sleep_test_cmd
</UL>

<P><STRONG><a name="[9e]"></a>app_restore_sleep_mode</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_extended_sleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_deep_sleep
</UL>

<P><STRONG><a name="[a0]"></a>app_force_active_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_sleep_mode (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
</UL>

<P><STRONG><a name="[144]"></a>app_ble_ext_wakeup_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>app_ble_ext_wakeup_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>app_ble_ext_wakeup_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[146]"></a>app_ble_force_wakeup</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>app_last_rwble_evt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>HardFault_HandlerC</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, hardfault_handler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>GPIO_reservations</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, periph_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[a1]"></a>set_pad_functions</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_pad_functions &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[88]"></a>periph_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = periph_init &rArr; set_pad_functions &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_functions
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKEUP_LP_Handler
</UL>

<P><STRONG><a name="[a4]"></a>init_TXEN_RXEN_irqs</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_TXEN_RXEN_irqs &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[a6]"></a>select_lp_clk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pwr_and_clk_ble
</UL>

<P><STRONG><a name="[8c]"></a>init_pwr_and_clk_ble</STRONG> (Thumb, 468 bytes, Stack size 4 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_pwr_and_clk_ble
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_lp_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[148]"></a>set_pxact_gpio</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>calibrate_rcx20</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, arch_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler
</UL>

<P><STRONG><a name="[92]"></a>read_rcx_freq</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = read_rcx_freq &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[85]"></a>set_sleep_delay</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_sleep_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init_func
</UL>

<P><STRONG><a name="[4d]"></a>get_rc16m_count_func</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_rc16m_count_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$get_rc16m_count_func (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[98]"></a>conditionally_run_radio_cals</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conditionally_run_radio_cals
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibration (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_vcocal_LUT_InitUpdate (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[b1]"></a>lld_sleep_us_2_lpcycles_rcx_func</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_sleep_us_2_lpcycles_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func
</UL>

<P><STRONG><a name="[b4]"></a>lld_sleep_lpcycles_2_us_rcx_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func
</UL>

<P><STRONG><a name="[2a]"></a>lld_sleep_us_2_lpcycles_sel_func</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_sleep_us_2_lpcycles_sel_func &rArr; lld_sleep_us_2_lpcycles_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_rcx_func
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_func (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2b]"></a>lld_sleep_lpcycles_2_us_sel_func</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_sleep_lpcycles_2_us_sel_func &rArr; lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_func (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate_func_patched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[23]"></a>uart_flow_off_func</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_flow_off_func
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_is_rx_fifo_empty
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_on (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[149]"></a>calculate_arch_adv_time</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>iq_trim_from_otp</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[58]"></a>rf_reg_rd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>rf_reg_wr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>rf_regs</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit_func
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func
</UL>

<P><STRONG><a name="[1f]"></a>rf_init_func</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rf_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibration (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_vcocal_LUT_InitUpdate (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_regs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2c]"></a>rf_reinit_func</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_reinit_func
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rf_diag_irq (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_regs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b9]"></a>GPIOn_Handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[19]"></a>GPIO0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO1_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO2_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO3_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO4_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ke_task_init_func</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ke_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_task_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[70]"></a>my_llc_con_update_req_ind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ch_map.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_llc_con_update_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>my_llc_ch_map_req_ind</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ch_map.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_llc_ch_map_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ch_map_ind (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, atts_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_pdu_recv_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_resp (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_no_resp (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_signed_write_resp (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_cmd_cmp (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_resp (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_resp (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_resp (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_resp (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_resp (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_resp (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_resp (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_resp (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_resp (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_resp (via Veneer)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>smpc_send_pairing_req_ind</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, smpc.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_enc_keysize (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>smpc_check_pairing_feat</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smpc.obj(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>smpc_pairing_cfm_handler</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, smpc_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_pairing_cfm_handler &rArr; smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_start (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_enc_keysize (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>patched_gapm_adv_op_sanity</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, gapm_util.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = patched_gapm_adv_op_sanity &rArr; gapm_adv_sanity
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_recon_addr (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_privacy_flag (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_sanity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>custom_nvds_get_func</STRONG> (Thumb, 1004 bytes, Stack size 24 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = custom_nvds_get_func
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[73]"></a>nvds_read_bdaddr_from_otp</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvds_read_bdaddr_from_otp
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[28]"></a>lld_sleep_compensate_func_patched</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lld_sleep_compensate_func_patched &rArr; lld_sleep_lpcycles_2_us_sel_func &rArr; lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BLE_WAKEUP_LP_Handler &rArr; periph_init &rArr; set_pad_functions &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BLE_CSCNT_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_CSCNT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_start_isr (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$BLE_CSCNT_Handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BLE_SLP_Handler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_SLP_Handler &rArr; gtl_eif_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_rcx20
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_workaround_init (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_regs_pop (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BLE_RX_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_RX_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_EVENT_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_EVENT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BLE_RF_DIAG_Handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_RF_DIAG_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_cal_cap (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gauss_modgain (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>rwip_sleep</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rwip_sleep &rArr; rwip_slot_2_lpcycles_rcx &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_ext_wakeup_get
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_get (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_check (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_sleep_check (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_enter_sleep (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_regs_push (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles_rcx
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[93]"></a>app_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_init &rArr; init_TXEN_RXEN_irqs &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TXEN_RXEN_irqs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[f8]"></a>set_state_start_rx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_state_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_start_prod_rx_test
</UL>

<P><STRONG><a name="[fa]"></a>hci_start_prod_rx_test</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_start_prod_rx_test &rArr; set_state_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[77]"></a>set_state_start_tx</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_state_start_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_send_nb_packages
</UL>

<P><STRONG><a name="[fc]"></a>hci_tx_send_nb_packages</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_tx_send_nb_packages &rArr; set_state_start_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[fd]"></a>set_state_start_continue_tx</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_state_start_continue_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start_continue_test_mode
</UL>

<P><STRONG><a name="[fe]"></a>hci_tx_start_continue_test_mode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_tx_start_continue_test_mode &rArr; set_state_start_continue_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_continue_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[ff]"></a>hci_unmodulated_cmd</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hci_unmodulated_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_cal_cap (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[79]"></a>set_state_stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_state_stop &rArr; lld_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_try_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_header_func
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_asynch_trm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_rx_prod_test_cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_tx_continuous_test_cmd
</UL>

<P><STRONG><a name="[103]"></a>hci_end_tx_continuous_test_cmd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_end_tx_continuous_test_cmd &rArr; set_state_stop &rArr; lld_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_header_func
</UL>

<P><STRONG><a name="[104]"></a>hci_end_rx_prod_test_cmd</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_end_rx_prod_test_cmd &rArr; set_state_stop &rArr; lld_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_header_func
</UL>

<P><STRONG><a name="[105]"></a>hci_sleep_test_cmd</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_sleep_test_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_extended_sleep
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_deep_sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[107]"></a>set_XTAL_trim_reg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, customer_prod.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_xtal_trim_cmd
</UL>

<P><STRONG><a name="[109]"></a>otp_write_words</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = otp_write_words
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_write_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_rw_cmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_xtal_trim_cmd
</UL>

<P><STRONG><a name="[106]"></a>hci_xtal_trim_cmd</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hci_xtal_trim_cmd &rArr; auto_trim &rArr; calculations_2 &rArr; Simulation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_write_words
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_XTAL_trim_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[10a]"></a>otp_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = otp_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_read_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_rw_cmd
</UL>

<P><STRONG><a name="[10b]"></a>hci_otp_rw_cmd</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_otp_rw_cmd &rArr; otp_read
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_write_words
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[10d]"></a>hci_otp_read_cmd</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_otp_read_cmd &rArr; otp_read
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_read
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[10f]"></a>hci_otp_write_cmd</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_otp_write_cmd &rArr; otp_write_words
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otp_write_words
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[110]"></a>hci_register_rw_cmd</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hci_register_rw_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload_func
</UL>

<P><STRONG><a name="[14a]"></a>lld_evt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, custom_lld_evt.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>lld_evt_rx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, custom_lld_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lld_evt_rx &rArr; lld_data_check &rArr; lld_data_rx_check
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_lld_evt.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>lld_evt_init_func</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, custom_lld_evt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_evt_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_local_sca_init (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[111]"></a>lld_data_check</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, custom_lld_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lld_data_check &rArr; lld_data_rx_check
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_tx_check (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_rx_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx
</UL>

<P><STRONG><a name="[14b]"></a>spi_write_rx_data_back_2_pxi</STRONG> (Thumb, 956 bytes, Stack size 12 bytes, custom_lld_data.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>lld_test_stop</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, custom_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_test_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop
</UL>

<P><STRONG><a name="[4f]"></a>lld_test_stop_func</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, custom_lld.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_test_stop_func
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[e8]"></a>gtl_eif_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler
</UL>

<P><STRONG><a name="[2e]"></a>gtl_eif_init_func</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gtl_eif_init_func &rArr; gtl_eif_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[126]"></a>gtl_eif_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, custom_gtl_eif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>

<P><STRONG><a name="[14c]"></a>gtl_eif_start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>gtl_eif_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_ext_wakeup_enable (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
</UL>

<P><STRONG><a name="[11f]"></a>gtl_hci_rx_header</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, custom_gtl_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_hci_rx_header
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[37]"></a>gtl_hci_rx_header_func</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, custom_gtl_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gtl_hci_rx_header_func &rArr; hci_end_rx_prod_test_cmd &rArr; set_state_stop &rArr; lld_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_rx_prod_test_cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_end_tx_continuous_test_cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[121]"></a>gtl_hci_rx_payload</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, custom_gtl_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_hci_rx_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[38]"></a>gtl_hci_rx_payload_func</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, custom_gtl_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gtl_hci_rx_payload_func &rArr; hci_xtal_trim_cmd &rArr; auto_trim &rArr; calculations_2 &rArr; Simulation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_register_rw_cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_write_cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_read_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_otp_rw_cmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_xtal_trim_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_sleep_test_cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unmodulated_cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start_continue_test_mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_send_nb_packages
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_start_prod_rx_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[14d]"></a>gtl_hci_tx_evt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, custom_gtl_hci.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>gtl_hci_tx_evt_func</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, custom_gtl_hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gtl_hci_tx_evt_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[129]"></a>delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xtal_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Trim
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim
</UL>

<P><STRONG><a name="[128]"></a>Setting_Trim</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, xtal_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Setting_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim
</UL>

<P><STRONG><a name="[12a]"></a>Clock_Read</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, xtal_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clock_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;measure_pulse
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim
</UL>

<P><STRONG><a name="[12d]"></a>Simulation</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, xtal_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Simulation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculations_2
</UL>

<P><STRONG><a name="[133]"></a>calculations_2</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, xtal_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = calculations_2 &rArr; Simulation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_trim
</UL>

<P><STRONG><a name="[108]"></a>auto_trim</STRONG> (Thumb, 1078 bytes, Stack size 40 bytes, xtal_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = auto_trim &rArr; calculations_2 &rArr; Simulation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculations_2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting_Trim
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_xtal_trim_cmd
</UL>

<P><STRONG><a name="[12c]"></a>measure_pulse</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pulse.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Read
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles_rcx
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles_rcx
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_slot_2_lpcycles_rcx
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Simulation
</UL>

<P><STRONG><a name="[135]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[134]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, gpio.o(i.GPIO_ConfigurePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_functions
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ResetIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[13a]"></a>GPIO_SetActive</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gpio.o(i.GPIO_SetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[13b]"></a>GPIO_SetInactive</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gpio.o(i.GPIO_SetInactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[13c]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, gpio.o(i.GPIO_SetPinFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[87]"></a>GPIO_init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, gpio.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_reservations
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[14f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[150]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>app_asynch_trm</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_asynch_trm &rArr; set_state_stop &rArr; lld_test_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_state_start_tx
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibration (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_vcocal_LUT_InitUpdate (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_sleep_mode (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[68]"></a>my_gtl_msg_send_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_gtl_msg_send_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_send_msg (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>cmp_abs_time</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cmp_abs_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[84]"></a>NVIC_SetPriority</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_func
</UL>

<P><STRONG><a name="[a5]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TXEN_RXEN_irqs
</UL>

<P><STRONG><a name="[b5]"></a>uart_is_rx_fifo_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off_func
</UL>

<P><STRONG><a name="[5b]"></a>rf_sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>RADIOCNTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>rf_rssi_convert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>ke_task_schedule</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ke_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ke_task_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_handler_get (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ke_task.obj(.text)
</UL>
<P><STRONG><a name="[e2]"></a>gapm_adv_sanity</STRONG> (Thumb, 170 bytes, Stack size 60 bytes, gapm_util.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gapm_adv_sanity
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity
</UL>

<P><STRONG><a name="[f0]"></a>rwip_slot_2_lpcycles</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rwip_slot_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[f1]"></a>rwip_slot_2_lpcycles_rcx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rwip_slot_2_lpcycles_rcx &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[61]"></a>tx_msg_otp_read_cfm_completed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, customer_prod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tx_msg_otp_read_cfm_completed
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> customer_prod.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, customer_prod.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_unmodulated_cmd
</UL>

<P><STRONG><a name="[114]"></a>lld_data_rx_check</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, custom_lld_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lld_data_rx_check
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_ack_received (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_data_check
</UL>

<P><STRONG><a name="[11a]"></a>gtl_eif_read_next_out_of_sync</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_read_next_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync
</UL>

<P><STRONG><a name="[119]"></a>gtl_eif_out_of_sync_check</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync
</UL>

<P><STRONG><a name="[120]"></a>gtl_eif_read_payl</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gtl_eif_read_payl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[118]"></a>gtl_eif_out_of_sync</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gtl_eif_out_of_sync &rArr; gtl_eif_read_next_out_of_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync_check
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_next_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[11c]"></a>gtl_eif_read_hdr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_read_hdr
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[65]"></a>gtl_eif_rx_done</STRONG> (Thumb, 608 bytes, Stack size 24 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gtl_eif_rx_done &rArr; gtl_eif_out_of_sync &rArr; gtl_eif_read_next_out_of_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_payload
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_hci_rx_header
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_hdr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_payl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_out_of_sync_check
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_read_next_out_of_sync
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_gtl_eif.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>gtl_eif_read_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_init_func
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_rx_done
</UL>

<P><STRONG><a name="[67]"></a>gtl_eif_tx_done</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_tx_done
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_gtl_eif.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>gtl_eif_tx_done_evt_handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, custom_gtl_eif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtl_eif_tx_done_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_send_msg (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep_enable (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_ext_wakeup_enable (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_gtl_eif.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
